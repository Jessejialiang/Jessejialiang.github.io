[{"title":"函数防抖，函数节流","date":"2020-05-24T16:19:33.000Z","path":"2020/05/25/函数防抖，函数节流/","content":"","categories":[{"name":"面经整理","slug":"面经整理","permalink":"http://jesseleung.top/categories/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/"}],"tags":[]},{"title":"javascript基本类型","date":"2020-05-24T08:00:31.000Z","path":"2020/05/24/javascript基本类型/","content":"<h1 id=\"javascript基本类型\"><a href=\"#javascript基本类型\" class=\"headerlink\" title=\"javascript基本类型\"></a>javascript基本类型</h1><h3 id=\"分为两种原始数据类型和复杂数据类型\"><a href=\"#分为两种原始数据类型和复杂数据类型\" class=\"headerlink\" title=\"分为两种原始数据类型和复杂数据类型\"></a>分为两种原始数据类型和复杂数据类型</h3><p>原始数据类型：undefind null boolean string number symbol</p>\n<p>复杂数据类型：object (array,Sring….)(这里的String指代的是String对象：new String())</p>\n<h2 id=\"常见判断基本数据类型\"><a href=\"#常见判断基本数据类型\" class=\"headerlink\" title=\"常见判断基本数据类型\"></a>常见判断基本数据类型</h2><h3 id=\"typeof-and-instanceof\"><a href=\"#typeof-and-instanceof\" class=\"headerlink\" title=\"typeof and instanceof\"></a>typeof and instanceof</h3><h2 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h2><p>1.对于原始数据类型除了null以外都正确输出</p>\n<p>而null则会输出object</p>\n<p>原因：历史遗留原因：null :000000，而对于object开头都是000,所以null会被识别为对象</p>\n<p>2.对于object来说除了function以外都会输出object</p>\n<p>function会输出function</p>\n<p>如果判断具体是什么复杂数据类型呢？</p>\n<h2 id=\"1-instanceof\"><a href=\"#1-instanceof\" class=\"headerlink\" title=\"1.instanceof\"></a>1.instanceof</h2><p>instanceof内部是通过原型链和自身调用形成的循环的方法判断的</p>\n<h4 id=\"instanceof主要是针对复杂数据类型的，返回的是布尔类型\"><a href=\"#instanceof主要是针对复杂数据类型的，返回的是布尔类型\" class=\"headerlink\" title=\"instanceof主要是针对复杂数据类型的，返回的是布尔类型\"></a>instanceof主要是针对复杂数据类型的，返回的是布尔类型</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>)<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"如何实现一个instanceof\"><a href=\"#如何实现一个instanceof\" class=\"headerlink\" title=\"如何实现一个instanceof?\"></a>如何实现一个instanceof?</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myInstanceof</span>(<span class=\"params\">left,right</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span>(right)!==<span class=\"string\">'object'</span>||<span class=\"keyword\">typeof</span>(right)!==<span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prototype = right.prototype;</span><br><span class=\"line\">    left = left._proto_;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left==<span class=\"literal\">null</span>||left==undefind)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left = prototype)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        left = left._proto_</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-通过具体的类型判断原始数据类型和复杂数据类型\"><a href=\"#2-通过具体的类型判断原始数据类型和复杂数据类型\" class=\"headerlink\" title=\"2.通过具体的类型判断原始数据类型和复杂数据类型\"></a>2.通过具体的类型判断原始数据类型和复杂数据类型</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"string\">'1'</span>)<span class=\"comment\">//\"[object String]\"</span></span><br></pre></td></tr></table></figure>\n\n<p>只需判断str.slice(8,-1)是否为我们想要的类型即可</p>\n<h1 id=\"类型转化\"><a href=\"#类型转化\" class=\"headerlink\" title=\"类型转化\"></a>类型转化</h1><p>类型转化一般分为三种：</p>\n<p>转化为布尔值</p>\n<p>转化为数字</p>\n<p>转化为字符串</p>\n<h3 id=\"转Boolean\"><a href=\"#转Boolean\" class=\"headerlink\" title=\"转Boolean\"></a>转Boolean</h3><p>在条件判断时，除了 <code>undefined</code>， <code>null</code>， <code>false</code>， <code>NaN</code>， <code>&#39;&#39;</code>， <code>0</code>， <code>-0</code>，其他所有值都转为 <code>true</code>，包括所有对象。</p>\n<h4 id=\"转数字\"><a href=\"#转数字\" class=\"headerlink\" title=\"转数字\"></a>转数字</h4><p>分为下列情况：</p>\n<p>string:’1’—&gt;1,’a’—&gt;NaN</p>\n<p>空数组：0，其他为NaN</p>\n<p>boolean:true—&gt;1 false—&gt;0</p>\n<p>除了数组外的复杂数据类型：NaN</p>\n<p>symbol：报错</p>\n<h2 id=\"对象转化为原始数据类型\"><a href=\"#对象转化为原始数据类型\" class=\"headerlink\" title=\"对象转化为原始数据类型\"></a>对象转化为原始数据类型</h2><ul>\n<li>如果已经是原始类型了，那就不需要转换了</li>\n<li>如果需要转字符串类型就调用 <code>x.toString()</code>，转换为基础类型的话就返回转换的值。不是字符串类型的话就先调用 <code>valueOf</code>，结果不是基础类型的话再调用 <code>toString</code></li>\n<li>调用 <code>x.valueOf()</code>，如果转换为基础类型，就返回转换的值</li>\n<li>如果都没有返回原始类型，就会报错</li>\n</ul>\n<p>当然你也可以重写 <code>Symbol.toPrimitive</code> ，该方法在转原始类型时调用优先级最高。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a &#x3D; &#123;</span><br><span class=\"line\">  valueOf() &#123;</span><br><span class=\"line\">    return 0</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    return &#39;1&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  [Symbol.toPrimitive]() &#123;</span><br><span class=\"line\">    return 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">1 + a &#x2F;&#x2F; &#x3D;&gt; 3</span><br></pre></td></tr></table></figure>\n\n<p>加法运算符不同于其他几个运算符，它有以下几个特点：</p>\n<ul>\n<li>运算中其中一方为字符串，那么就会把另一方也转换为字符串</li>\n<li>如果一方不是字符串或者数字，那么会将它转换为数字或者字符串</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 + &#39;1&#39; &#x2F;&#x2F; &#39;11&#39;</span><br><span class=\"line\">true + true &#x2F;&#x2F; 2</span><br><span class=\"line\">4 + [1,2,3] &#x2F;&#x2F; &quot;41,2,3&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如果你对于答案有疑问的话，请看解析：</p>\n<ul>\n<li>对于第一行代码来说，触发特点一，所以将数字 <code>1</code> 转换为字符串，得到结果 <code>&#39;11&#39;</code></li>\n<li>对于第二行代码来说，触发特点二，所以将 <code>true</code> 转为数字 <code>1</code></li>\n<li>对于第三行代码来说，触发特点二，所以将数组通过 <code>toString</code> 转为字符串 <code>1,2,3</code>，得到结果 <code>41,2,3</code></li>\n</ul>\n<p>另外对于加法还需要注意这个表达式 <code>&#39;a&#39; + + &#39;b&#39;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;a&#39; + + &#39;b&#39; &#x2F;&#x2F; -&gt; &quot;aNaN&quot;</span><br></pre></td></tr></table></figure>\n\n<p>因为 <code>+ &#39;b&#39;</code> 等于 <code>NaN</code>，所以结果为 <code>&quot;aNaN&quot;</code>，你可能也会在一些代码中看到过 <code>+ &#39;1&#39;</code> 的形式来快速获取 <code>number</code> 类型。</p>\n<p>减法运算符（除了加法外都会转化为数字）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span><span class=\"number\">-1</span>)<span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"和-的区别\"><a href=\"#和-的区别\" class=\"headerlink\" title=\"==和===的区别\"></a>==和===的区别</h1><p>==与===的不同：==不同类型还会转化成相同类型比较，而===只要类型和值都要相同两者才会true</p>\n<p>==两者比较的过程：</p>\n<p>1.如果两者类型相同，直接比较值相不相同</p>\n<p>2.如果类型不同则先转化类型再比较</p>\n<p>3.先判断两者是否为undefind和null，如果两者都是则直接为true</p>\n<p>4.判断两者是否为string和number,如果是则把string转化为number</p>\n<p>5.判断其中一方是否为boolean，如果是就直接把boolean转化为数字</p>\n<p>6.判断一方是否为object,另一方是否为string,number，symbol时，把对象转化为原始数据类型。</p>\n","categories":[{"name":"面经整理","slug":"面经整理","permalink":"http://jesseleung.top/categories/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/"}],"tags":[]},{"title":"手撕call,apply,bind","date":"2020-05-24T06:42:39.000Z","path":"2020/05/24/手撕call,apply,bind/","content":"<h1 id=\"手撕call-apply-bind\"><a href=\"#手撕call-apply-bind\" class=\"headerlink\" title=\"手撕call,apply,bind\"></a>手撕call,apply,bind</h1><p>直接上代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myCall=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content</span>)</span>&#123;</span><br><span class=\"line\">     content = content||<span class=\"built_in\">window</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [...arguments].slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">    content.fn = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result =content.fn(...args);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> content.fn;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><p>1.首先content是可选参数，content为空时默认为window;</p>\n<p>2.this代表我们所要执行的函数，怎么把代指对象转移？</p>\n<p>就是通过content.fn=this,再执行content。fn()的过程</p>\n<p>最后删除content.fn</p>\n<h3 id=\"apply同理\"><a href=\"#apply同理\" class=\"headerlink\" title=\"apply同理\"></a>apply同理</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myApply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content</span>)</span>&#123;</span><br><span class=\"line\">     content = content||<span class=\"built_in\">window</span>;</span><br><span class=\"line\">    content.fn = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">       result = content.fn(...arguments[<span class=\"number\">1</span>])</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      result  = content.fn()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> content.fn</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"bind不同\"><a href=\"#bind不同\" class=\"headerlink\" title=\"bind不同\"></a>bind不同</h3><p>bind有两种方式：</p>\n<p>第一种：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = fun.bind(b,<span class=\"number\">12</span>)</span><br><span class=\"line\">a(<span class=\"number\">123</span>)</span><br></pre></td></tr></table></figure>\n\n<p>第二种：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b =fun.bind(<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> bb = <span class=\"keyword\">new</span> b()</span><br></pre></td></tr></table></figure>\n\n<p>产生两种方法的原因是因为bind返回的是一个函数</p>\n<h3 id=\"new创建的对象，其指针会指向创建的对象\"><a href=\"#new创建的对象，其指针会指向创建的对象\" class=\"headerlink\" title=\"new创建的对象，其指针会指向创建的对象\"></a>new创建的对象，其指针会指向创建的对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myBind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content</span>)</span>&#123;</span><br><span class=\"line\">    content = content||<span class=\"built_in\">window</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fn = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    args = [...arguments].slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> F)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> fn(...args,...arguments)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            fn.apply(content,args.concat(...arguments))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"面经整理","slug":"面经整理","permalink":"http://jesseleung.top/categories/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/"}],"tags":[]},{"title":"foo发的前端问题","date":"2020-05-22T11:25:51.000Z","path":"2020/05/22/foo发的前端问题/","content":"<h1 id=\"new-foo-引发的问题\"><a href=\"#new-foo-引发的问题\" class=\"headerlink\" title=\"new foo()引发的问题\"></a>new foo()引发的问题</h1><p>遇到了一个很奇怪的面经题，整理下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.getName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">foo.getName();</span><br><span class=\"line\">getName()</span><br><span class=\"line\">foo.getName();</span><br><span class=\"line\">getName()</span><br><span class=\"line\"><span class=\"keyword\">new</span> foo.getName();</span><br><span class=\"line\"><span class=\"keyword\">new</span> foo().getName();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> foo().getName()</span><br></pre></td></tr></table></figure>\n\n<p>一开始看到头都大</p>\n<p>一步一步分析把！</p>\n<h2 id=\"首先搞清楚声明变量提前和函数变量提前\"><a href=\"#首先搞清楚声明变量提前和函数变量提前\" class=\"headerlink\" title=\"首先搞清楚声明变量提前和函数变量提前\"></a>首先搞清楚声明变量提前和函数变量提前</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)</span><br></pre></td></tr></table></figure>\n\n<p>转化：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\">foo=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数声明提前比变量声明提前还要提前\"><a href=\"#函数声明提前比变量声明提前还要提前\" class=\"headerlink\" title=\"函数声明提前比变量声明提前还要提前\"></a>函数声明提前比变量声明提前还要提前</h3><p>函数声明提升在前，变量声明提升在后</p>\n<h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.getName()<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<p>这个2就是foo.getName = function (){}的值。</p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getName()<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<p>因为函数声明提前比变量声明还要前，所以最后getName()输出为2</p>\n<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo().getName()<span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，当执行foo()时，里面的变量getName被提升到全局变量，所以全局变量重新赋值</p>\n<h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getName()<span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<p>上面导致全局变量重新赋值为foo()里的变量</p>\n<h2 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a>5</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> foo.getName()<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<p>这里要把foo.getName看作一个整体所以相当于</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = foo.getName;</span><br><span class=\"line\"><span class=\"keyword\">new</span> a(）</span><br></pre></td></tr></table></figure>\n\n<p>所以输出为2</p>\n<h2 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6\"></a>6</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> foo().getName()<span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p>一样的道理，把new 和（）中间看作整体，就像HTML两头标签一样</p>\n<p>涉及到一个小知识点：return this；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一般我们return this时返回一个对象，这个对象又可以接它的函数，然后这个函数又可以返回一个对象，最后形成我们常见的链式；</p>\n<p>当我们foo实例化后即我们new foo时，创造的实例可以在原型链上读取数据，如果想继承构造函数的方法，可以采用call方法</p>\n<h2 id=\"7\"><a href=\"#7\" class=\"headerlink\" title=\"7\"></a>7</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> foo().getName()<span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p>原理和上面的一样，采用把new和（）看成一对的双头标签，可以等处new xxx.getName()<br>最后得出3</p>\n","categories":[{"name":"面经整理","slug":"面经整理","permalink":"http://jesseleung.top/categories/%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/"}],"tags":[]},{"title":"http,http2,游览器","date":"2020-05-21T18:49:56.000Z","path":"2020/05/22/http,http2,游览器/","content":"<h2 id=\"1-HTTP和HTTPS的区别\"><a href=\"#1-HTTP和HTTPS的区别\" class=\"headerlink\" title=\"1.HTTP和HTTPS的区别\"></a>1.HTTP和HTTPS的区别</h2><p>1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</p>\n<p>2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p>\n<p>3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p>\n<p>4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全</p>\n<h2 id=\"2-tcp三次握手，一句话概括\"><a href=\"#2-tcp三次握手，一句话概括\" class=\"headerlink\" title=\"2.tcp三次握手，一句话概括\"></a>2.tcp三次握手，一句话概括</h2><p>1 客户端发送 syn 包</p>\n<p>2 服务端响应，发送 ack 包</p>\n<p>3 客户端再次发送 ack 确认包</p>\n<h2 id=\"3-TCP和UDP的区别\"><a href=\"#3-TCP和UDP的区别\" class=\"headerlink\" title=\"3.TCP和UDP的区别\"></a>3.TCP和UDP的区别</h2><p>TCP（Transmission Control Protocol，传输控制协议）提供的是面向连接，可靠的字节流服务。即客户和服务器交换数据前，必须现在双方之间建立一个TCP连接，之后才能传输数据。并且提供超时重发，丢弃重复数据，检验数据，流量控制等功能，保证数据能从一端传到另一端。</p>\n<p>UDP（User Data Protocol，用户数据报协议）是一个简单的面向数据报的运输层协议。它不提供可靠性，只是把应用程序传给IP层的数据报发送出去，但是不能保证它们能到达目的地。由于UDP在传输数据报前不用再客户和服务器之间建立一个连接，且没有超时重发等机制，所以传输速度很快。</p>\n<h2 id=\"4-WebSocket的实现和应用\"><a href=\"#4-WebSocket的实现和应用\" class=\"headerlink\" title=\"4.WebSocket的实现和应用\"></a>4.WebSocket的实现和应用</h2><p>这里使用的是w3c规范中关于<a href=\"http://dev.w3.org/html5/websockets/\" target=\"_blank\" rel=\"noopener\">HTML5 websocket API</a>的原生API，这些api很简单，就是利用new WebSocket创建一个指定连接服务端地址的ws实例，然后为该实例注册onopen(连接服务端),onmessage(接受服务端数据)，onclose(关闭连接)以及ws.send(建立连接后)发送请求。上面说了那么多，事实上可以看到html5 websocket API本身是很简单的一个对象和它的几个方法而已。</p>\n<h2 id=\"5-一个图片url访问后直接下载怎样实现？\"><a href=\"#5-一个图片url访问后直接下载怎样实现？\" class=\"headerlink\" title=\"5.一个图片url访问后直接下载怎样实现？\"></a>5.一个图片url访问后直接下载怎样实现？</h2><p>1.设置response header中的disposition-type为attachment</p>\n<p>Content-disposition 是 MIME 协议的扩展，MIME 协议指示 MIME 用户代理如何显示附加的文件。当 Internet Explorer 接收到头时，它会激活<strong>文件下载</strong>对话框，它的文件名框自动填充了头中指定的文件名。（请注意，这是设计导致的；无法使用此功能将文档保存到用户的计算机上，而不向用户询问保存位置。）   </p>\n<p>​        服务端向客户端游览器发送文件时，如果是浏览器支持的文件类型，一般会默认使用浏览器打开，比如txt、jpg等，会直接在浏览器中显示，如果需要提示用户保存，就要利用Content-Disposition进行一下处理，关键在于一定要加上attachment：</p>\n<p>2.通过<a>链接来实现图片下载download</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"girl.jpg\"</span> <span class=\"attr\">download</span>=<span class=\"string\">\"beautifulGirl\"</span>&gt;</span></span><br><span class=\"line\">   　　<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"girl.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","categories":[],"tags":[]},{"title":"Hello World","date":"2020-05-18T15:39:38.842Z","path":"2020/05/18/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","categories":[],"tags":[]}]